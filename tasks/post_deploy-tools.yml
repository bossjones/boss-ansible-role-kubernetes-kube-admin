---

# - name: detect docker's cgroup-driver
#   shell: docker info 2>/dev/null |grep -i cgroup | cut -d":" -f2 | tr -d " "
#   register: docker_cgroup_driver
#   changed_when: false

# - name: Download etcd
#   get_url: url=https://github.com/etcd-io/etcd/releases/download/{{boss__kubernetes__kubeadm__etcd_version}}/etcd-{{boss__kubernetes__kubeadm__etcd_version}}-linux-{{sys_arch}}.tar.gz
#            dest={{ boss__kubernetes__kubeadm__etcd_download_dir }}/etcd-{{boss__kubernetes__kubeadm__etcd_version}}-linux-{{sys_arch}}.tar.gz
#            sha256sum={{ boss__kubernetes__kubeadm__etcd_checksum }}

# - name: Unarchive etcd
#   unarchive: copy=no
#              src={{ boss__kubernetes__kubeadm__etcd_download_dir }}/etcd-{{boss__kubernetes__kubeadm__etcd_version}}-linux-{{sys_arch}}.tar.gz
#              dest={{ boss__kubernetes__kubeadm__etcd_download_dir }}
#              creates="{{ boss__kubernetes__kubeadm__etcd_download_dir }}/etcd-{{boss__kubernetes__kubeadm__etcd_version}}-linux-{{sys_arch}}/etcd"

# - name: Copy binaries from archive into etcd dir
#   synchronize: src="{{ boss__kubernetes__kubeadm__etcd_download_dir }}/etcd-{{boss__kubernetes__kubeadm__etcd_version}}-linux-{{sys_arch}}/{{ item }}"
#                dest="{{ boss__kubernetes__kubeadm__etcd_dir }}"
#                archive=True
#   delegate_to: "{{ inventory_hostname }}"
#   with_items:
#     - etcdctl



# - name: Add alias for etcdctl to bashrc
#   lineinfile:
#     path: '$HOME/.bashrc'
#     line: 'source <(kubeadm completion bash)'
#     create: yes
#   become: '{{ item }}'
#   with_items:
#     - true  # Run as root
#     - false # Run as SSH user


# TODO: create an alias that allows us to use this guy right here
# - name: Determine etcd image ID being used by the etcd cluster
#   shell: "docker ps | grep k8s_etcd | grep _kube-system_ | grep -v pause | awk '{print $2}' "
#   register: etcd_image_id
#   when: "'primary-etcd' in group_names"

# - name: Check etcd cluster health on primary etcd node
#   shell: "for i in 1 2 3 4 5 6 7 8 9 ; do docker run --rm --net host -v /etc/kubernetes:/etc/kubernetes {{ etcd_image_id.stdout }} etcdctl --cert-file /etc/kubernetes/pki/etcd/peer.crt --key-file /etc/kubernetes/pki/etcd/peer.key --ca-file /etc/kubernetes/pki/etcd/ca.crt --endpoints https://{{ ansible_default_ipv4.address }}:2379 cluster-health && exit 0; sleep 5s; done; /bin/false"
#   when: "'primary-etcd' in group_names"
