####################################################
# - include_tasks: install.yml
####################################################

# SOURCE: https://github.com/containerd/cri/blob/master/contrib/ansible/tasks/bootstrap_ubuntu.yaml
- name: "Install required packages on Ubuntu"
  package:
    name: "{{ item }}"
    state: present
  with_items:
      - unzip
      - tar
      - apt-transport-https
      - btrfs-tools
      - libseccomp2
      - socat
      - util-linux
      # - ntp
      # - ntpdate

- name: add the kubernetes apt repo key
  apt_key:
    url: "https://packages.cloud.google.com/apt/doc/apt-key.gpg"
    state: present
  environment: '{{ proxy_env | default ({}) }}'
  when: ansible_os_family == "Debian"

- name: add the kubernetes apt repo
  apt_repository:
    repo: "deb [arch={{sys_arch}}] http://apt.kubernetes.io/ kubernetes-{{ansible_distribution_release}} main"
    update_cache: True
    state: present
    filename: kubernetes
  environment: '{{ proxy_env | default ({}) }}'
  when: ansible_os_family == "Debian"

# TODO: Do the same for docker?
# - name: add the kubernetes apt repo
#   apt_repository:
#     repo: "deb [arch={{sys_arch}}] http://apt.kubernetes.io/ kubernetes-{{ansible_distribution_release}} edge"
#     update_cache: True
#     state: present
#     filename: kubernetes
#   environment: '{{ proxy_env | default ({}) }}'
#   when: ansible_os_family == "Debian"

- name: apt-get clean metadata
  command: apt-get clean ; apt-file purge
  args:
    warn: no
  when: ansible_os_family == "Debian" and package_state is defined and package_state == "latest"

# End OS dependent repo setup

### socat
- name: Install socat from centos/rhel/ubuntu repo
  package: name={{ item }} state={{ package_state | default ('latest') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - socat

# - name: install kubernetes
#   apt: name={{ item }} state=present allow_unauthenticated=yes
#   with_items:
#     # - docker.io
#     - kubelet
#     - kubeadm
#     - kubectl
#     - ntp

### kubelet
- name: Install kubelet
  package: name={{ item }} state={{ package_state | default ('latest') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubelet
  when: kubelet_version is not defined

- name: Install kubelet
  package: name="{{ item }}={{kubelet_version | regex_replace('v')}}*" state=present
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubelet
  when: kubelet_version is defined and ( kubelet_version!='installed' or kubelet_version!='latest' ) and ansible_os_family == "Debian"

- name: Install kubelet
  package: name="{{ item }}-{{kubelet_version | regex_replace('v')}}" state=present
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubelet
  when: kubelet_version is defined and ( kubelet_version!='installed' or kubelet_version!='latest' ) and ansible_os_family == "RedHat"

- name: Install kubelet
  package: name={{ item }} state={{kubelet_version}}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubelet
  when: kubelet_version is defined and ( kubelet_version=='installed' or kubelet_version=='latest' )

##############
### kubectl
- name: Install kubectl
  package: name={{ item }} state={{ package_state | default ('latest') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubectl
  when: kubectl_version is not defined

- name: Install kubectl # ansible bug 29705
  package: name="{{ item }}={{kubectl_version | regex_replace('v')}}*" state=present
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubectl
  when: kubectl_version is defined and ( kubectl_version!='installed' or kubectl_version!='latest' ) and ansible_os_family == "Debian"

- name: Install kubectl
  package: name="{{ item }}-{{kubectl_version | regex_replace('v')}}" state=present
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubectl
  when: kubectl_version is defined and ( kubectl_version!='installed' or kubectl_version!='latest' ) and ansible_os_family == "RedHat"

- name: Install kubectl
  package: name={{ item }} state={{kubectl_version}}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubectl
  when: kubectl_version is defined and ( kubectl_version=='installed' or kubectl_version=='latest' )

#############
### kubeadm
- name: Install kubeadm
  package: name={{ item }} state={{ package_state | default ('latest') }}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is not defined

- name: Install kubeadm # ansible bug 29705
  package: name="{{ item }}={{kubeadm_version | regex_replace('v')}}*" state=present
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is defined and ( kubeadm_version!='installed' or kubeadm_version!='latest' ) and ansible_os_family == "Debian"

- name: Install kubeadm
  package: name={{ item }}-{{kubeadm_version | regex_replace('v')}} state=present
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is defined and ( kubeadm_version!='installed' or kubeadm_version!='latest' ) and ansible_os_family == "RedHat"

- name: Install kubeadm
  package: name={{ item }} state={{kubeadm_version}}
  #environment: '{{ proxy_env | default ({}) }}'
  with_items:
  - kubeadm
  when: kubeadm_version is defined and ( kubeadm_version=='installed' or kubeadm_version=='latest' )

#- name: Install packages
#  package: name={{ item }} state={{ package_state | default ('latest') }}
#  environment: '{{ proxy_env | default ({}) }}'
#  with_items:
  #- kubernetes-cni # already installed by kubelet anyway
  #- docker # for RH, but could be installed manually, so no checks here.
  #- kubeadm
  #- docker.io # for ubuntu


- name: add node-ip.sh script
  copy:
    src: node-ip.sh
    dest: /usr/local/bin/node-ip.sh
    owner: root
    group: root
    mode: 0755
  tags:
  - kubeadm
  - kubelet


# - name: Create kubeadm sysctl file
#   copy: src=90-kubeadm.conf dest=/etc/sysctl.d/90-kubeadm.conf
#   tags:
#   - kubeadm
#   - kubelet


- name: '/etc/profile.d'
  file:
    path: "/etc/profile.d"
    state: directory

- name: add docker-aliases.sh script
  copy:
    src: docker-aliases.sh
    dest: /etc/profile.d/docker-aliases.sh
    owner: root
    group: root
    mode: 0755
  tags:
  - kubeadm
  - kubelet

# kube-tools


# NOTE: Multi pod and container log tailing for Kubernetes
- name: install stern
  shell: |
    curl -L 'https://github.com/wercker/stern/releases/download/{{STERN_VERSION}}/stern_linux_amd64' > /usr/local/bin/stern
    chmod +x /usr/local/bin/stern
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/stern

- name: Add source <(stern --completion=bash) to root/ssh user bashrc
  lineinfile:
    path: '$HOME/.bashrc'
    line: 'source <(stern --completion=bash)'
    create: yes
  become: '{{ item }}'
  with_items:
    - true  # Run as root
    - false # Run as SSH user

# An interactive kubernetes client featuring auto-complete using go-prompt.
- name: install kube-prompt
  shell: |
    wget https://github.com/c-bata/kube-prompt/releases/download/v{{KUBE_PROMPT_VERSION}}/kube-prompt_v{{KUBE_PROMPT_VERSION}}_linux_amd64.zip
    unzip kube-prompt_v{{KUBE_PROMPT_VERSION}}_linux_amd64.zip
    chmod +x kube-prompt
    sudo mv ./kube-prompt /usr/local/bin/kube-prompt
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/kube-prompt

# Simplistic interactive filtering tool
- name: install peco
  shell: |
    wget https://github.com/peco/peco/releases/download/v{{PECO_VERSION}}/peco_linux_amd64.tar.gz ;
    tar xvf peco_linux_amd64.tar.gz ;
    mv peco_linux_amd64/peco /usr/local/bin/peco ;
    chmod +x /usr/local/bin/peco ;
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/peco

# https://github.com/pulumi/kubespy/releases/download/v0.4.0/kubespy-linux-amd64.tar.gz

# kubespy - Tools for observing Kubernetes resources in real time, powered by Pulumi
- name: install kubespy - Tools for observing Kubernetes resources in real time, powered by Pulumi
  shell: |
    wget https://github.com/pulumi/kubespy/releases/download/v{{KUBESPY_VERSION}}/kubespy-linux-amd64.tar.gz ;
    tar xvf kubespy-linux-amd64.tar.gz ;
    mv releases/kubespy-linux-amd64/kubespy /usr/local/bin/kubespy ;
    chmod +x /usr/local/bin/kubespy ;
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/kubespy

# kubetail
- name: install kubetail
  shell: |
    curl -L 'https://raw.githubusercontent.com/johanhaleby/kubetail/master/kubetail' > /usr/local/bin/kubetail ;
    chmod +x /usr/local/bin/kubetail ;
    curl -L 'https://raw.githubusercontent.com/johanhaleby/kubetail/master/completion/kubetail.bash' > /etc/bash_completion.d/kubetail ;
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/kubetail

# https://raw.githubusercontent.com/johanhaleby/kubetail/master/kubetail

# https://github.com/peco/peco/releases/download/v0.5.3/peco_linux_amd64.tar.gz

- name: Install kube-shell
  pip:
    name: "kube-shell"

# NOTE: fast way to switch between clusters and namespaces in kubectl
- name: install kubectx - fast way to switch between clusters and namespaces in kubectl
  shell: |
    curl -L 'https://raw.githubusercontent.com/ahmetb/kubectx/master/kubectx' > /usr/local/bin/kubectx
    chmod +x /usr/local/bin/kubectx
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/kubectx

- name: install kubebox - Terminal and Web console for Kubernetes
  shell: |
    curl -L 'https://github.com/astefanutti/kubebox/releases/download/v0.3.2/kubebox-linux' > /usr/local/bin/kubebox
    chmod +x /usr/local/bin/kubebox
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/kubebox

# kubectl create clusterrolebinding default-cluster-admin --clusterrole=cluster-admin --serviceaccount=default:default


# curl -Lo kubebox https://github.com/astefanutti/kubebox/releases/download/v0.3.2/kubebox-linux && chmod +x kubebox

# NOTE: fast way to switch between clusters and namespaces in kubectl
- name: install kubens - fast way to switch between clusters and namespaces in kubectl
  shell: |
    curl -L 'https://raw.githubusercontent.com/ahmetb/kubectx/master/kubens' > /usr/local/bin/kubens
    chmod +x /usr/local/bin/kubens
  become: yes
  become_method: sudo
  args:
    executable: /bin/bash
    creates: /usr/local/bin/kubens
