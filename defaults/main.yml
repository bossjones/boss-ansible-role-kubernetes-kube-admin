---
boss__kubernetes__kubeadm__install_method: 'pkg'
# Edition can be one of: 'ce' (Community Edition) or 'ee' (Enterprise Edition).
boss__kubernetes__kubeadm__edition: 'ce'
boss__kubernetes__kubeadm__package: "docker-{{ boss__kubernetes__kubeadm__edition }}"
boss__kubernetes__kubeadm__package_state: present

# Service options.
boss__kubernetes__kubeadm__service_state: started
boss__kubernetes__kubeadm__service_enabled: True
boss__kubernetes__kubeadm__restart_handler_state: restarted

# Docker Compose options.
boss__kubernetes__kubeadm__install_compose: True
boss__kubernetes__kubeadm__compose_version: "1.22.0"
boss__kubernetes__kubeadm__compose_path: /usr/local/bin/docker-compose

# FIXME: Remove this if this works
# Some of the OS distributions are not detected by Ansible correctly. This
# variable can be used to fix that issue across all roles that use it.
boss__core__distribution: '{{ ansible_lsb.id
                        if (ansible_lsb|d() and ansible_lsb.id|d())
                        else ansible_distribution }}'

# Some of the OS releases are not detected by Ansible correctly. This variable
# can be used to fix that issue across all roles that use it.
boss__core__distribution_release: '{{ ansible_lsb.codename
                                if (ansible_lsb|d() and ansible_lsb.codename|d())
                                else ansible_distribution_release }}'

# Used only for Debian/Ubuntu. Switch 'stable' to 'edge' if needed.
boss__kubernetes__kubeadm__apt_release_channel: stable
# boss__kubernetes__kubeadm__apt_arch: amd64
boss__kubernetes__kubeadm__apt_repository: "deb [arch={{ boss__kubernetes__kubeadm__apt_arch }}] https://download.docker.com/linux/{{ boss__core__distribution|lower }} {{ boss__core__distribution_release }} {{ boss__kubernetes__kubeadm__apt_release_channel }}"
boss__kubernetes__kubeadm__apt_ignore_key_error: True

# Used only for RedHat/CentOS/Fedora.
boss__kubernetes__kubeadm__yum_repo_url: https://download.docker.com/linux/{{ (boss__core__distribution == "Fedora") | ternary("fedora","centos") }}/docker-{{ boss__kubernetes__kubeadm__edition }}.repo
boss__kubernetes__kubeadm__yum_repo_enable_edge: 0
boss__kubernetes__kubeadm__yum_repo_enable_test: 0

# A list of users who will be added to the docker group.
boss__kubernetes__kubeadm__default_users: ["{{ansible_user}}"]
# A list of users who will be added to the docker group.
boss__kubernetes__kubeadm__users: []



# FIXME: Things prob won't work 100% till I include a subset of below
# SOURCE: https://github.com/nickjj/ansible-docker/blob/master/defaults/main.yml

# ---

boss__kubernetes__kubeadm__remove_package: False

boss__kubernetes__kubeadm__version: "latest"

# boss__kubernetes__kubeadm__compose_version: "1.22.0"

boss__kubernetes__kubeadm__registries: []

boss__kubernetes__kubeadm__daemon_options: []
boss__kubernetes__kubeadm__daemon_environment: []

boss__kubernetes__kubeadm__cron_tasks:
  - job: docker system prune -f &> /dev/null
    name: "Docker clean up"
    schedule: ["0", "0", "*", "*", "0"]

boss__kubernetes__kubeadm__package_dependencies:
  - "apt-transport-https"
  - "ca-certificates"
  - "software-properties-common"
  - "gnupg2"
  - "cron"
  - "apt-utils"
  - "mount"
  - "jq"
  - "ethtool"

boss__kubernetes__kubeadm__apt_key_id: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88"
boss__kubernetes__kubeadm__apt_key_server: "https://download.docker.com/linux/{{ boss__core__distribution | lower }}/gpg"
boss__kubernetes__kubeadm__apt_cache_time: 86400


# NOTE: Taken from vagrant-ansible-kubernetes
boss__kubernetes__kubeadm__install_nfs: true

boss__kubernetes__kubeadm__kubernetes_interface: eth0  # enp0s8 (if vagrant)
boss__kubernetes__kubeadm__nfs_interface: "{{ boss__kubernetes__kubeadm__kubernetes_interface }}"

# SOURCE: darkedges.nfs
boss__kubernetes__kubeadm__nfs_server_group: kubernetes-master
boss__kubernetes__kubeadm__nfs_client_group: kubernetes-nodes

boss__kubernetes__kubeadm__nfs_exports:
  - path: "/nfsfileshare"
    remote: "/nfsfileshare"
    export: "*(fsid=0,rw,async,no_root_squash,no_subtree_check,insecure)"


boss__kubernetes__kubeadm__kernel_modules_setup: True
boss__kubernetes__kubeadm__ntp_setup: True


boss__kubernetes__kubeadm__master_node_name: master
boss__kubernetes__kubeadm__docker_cgroup_driver: cgroupfs

boss__kubernetes__kubeadm__master_node_ip: '192.168.50.101' # vagrant assigned IP address

# boss__kubernetes__kubeadm__env_KUBELET_EXTRA_ARGS_list: We will use something like {{ boss__kubernetes__kubeadm__env_KUBELET_EXTRA_ARGS_list | join(' ') } to properly create the value:
# Environment="KUBELET_EXTRA_ARGS=--node-ip=192.168.50.101 --cgroup-driver=cgroupfs"
boss__kubernetes__kubeadm__env_KUBELET_EXTRA_ARGS_list:
  - "--node-ip={{boss__kubernetes__kubeadm__master_node_ip}}"
  - "--cgroup-driver={{boss__kubernetes__kubeadm__docker_cgroup_driver}}"


boss__kubernetes__kubeadm__kubeadm_pod_network_cidr: 10.32.0.0/12  # 10.32.0.0/12 is specifically needed by weave-net
boss__kubernetes__kubeadm__kubeadm_service_cidr: 10.96.0.0/12  # 10.96.0.0/12 is specifically needed by weave-net
boss__kubernetes__kubeadm__kubeadm_init_cmd: "kubeadm init --kubernetes-version=1.11.5 --apiserver-advertise-address={{boss__kubernetes__kubeadm__master_node_ip}} --pod-network-cidr={{boss__kubernetes__kubeadm__kubeadm_pod_network_cidr}} --feature-gates=CoreDNS=true --node-name={{boss__kubernetes__kubeadm__master_node_name}} --service-cidr={{boss__kubernetes__kubeadm__kubeadm_service_cidr}}"

# kubeadm init --kubernetes-version=1.11.5 --apiserver-advertise-address={{boss__kubernetes__kubeadm__master_node_ip}} --pod-network-cidr=10.32.0.0/12 --feature-gates=CoreDNS=true --node-name={{boss__kubernetes__kubeadm__master_node_name}} --service-cidr=10.96.0.0/12 >> cluster_initialized.txt

boss__kubernetes__kubeadm__k8s_network_addons_urls:
- "https://cloud.weave.works/k8s/net?k8s-version=v1.11.5&env.IPALLOC_RANGE={{boss__kubernetes__kubeadm__kubeadm_pod_network_cidr}}"


# These are literally kubernetes addons, like dashboard, heapster, and more
boss__kubernetes__kubeadm__k8s_addons_urls:
- "https://github.com/kubernetes/kubernetes/raw/master/cluster/addons/node-problem-detector/npd.yaml"  # rbac ready

#  kubeadm reset --force &&
#  sysctl -p &&
#  kubeadm init --apiserver-advertise-address=10.0.0.10 --pod-network-cidr=10.244.0.0/16


#####
## TAINTS (for master) & uncordon
## NoExecute evicts on the spot. (while NoSchedule does not allow new pods); other option: PreferNoSchedule
## FYI, by default, master has this taint: node-role.kubernetes.io/master:NoSchedule
## If you want to be able to schedule pods on the master, either set master_uncordon:true  (prefered option) or via taints section: uncomment 'node-role.kubernetes.io/master:NoSchedule-'
## It's useful if it's a single-machine Kubernetes cluster for development (replacing minikube)
## To see taints, use: kubectl describe nodes

boss__kubernetes__kubeadm__master_uncordon: True

boss__kubernetes__kubeadm__taints_master:
- 'node-role.kubernetes.io/master-'  # allow pods to run on master node
#taints_master:
#- 'dedicated=master:NoExecute'                 # Force eviction of pods from master
#- 'dedicated=master:PreferNoSchedule'          # Safety net
#- 'dedicated:NoExecute-'                       # Puts the previous PreferNoSchedule into action - step1
#- 'node-role.kubernetes.io/master:NoSchedule-' # Puts the previous PreferNoSchedule into action - step2
#####


boss__kubernetes__kubeadm__etcd_version: v3.2.18
boss__kubernetes__kubeadm__etcd_checksum: b729db0732448064271ea6fdcb901773c4fe917763ca07776f22d0e5e0bd4097
boss__kubernetes__kubeadm__etcd_download_dir: /usr/local/src
boss__kubernetes__kubeadm__etcd_dir: /usr/local/bin

# etcd_release: "etcd-{{ boss__kubernetes__kubeadm__etcd_version }}-{{ etcd_platform }}-{{ etcd_arch }}"
# etcd_download_filename: "{{ etcd_release }}.tar.gz"


# https://github.com/etcd-io/etcd/releases/download/v3.2.25/etcd-v3.2.25-linux-arm64.tar.gz


boss__kubernetes__kubeadm__etcd_download_url: "https://github.com/etcd-io/etcd/releases/download/{{boss__kubernetes__kubeadm__etcd_version}}/etcd-{{boss__kubernetes__kubeadm__etcd_version}}-linux-{{sys_arch}}.tar.gz"
